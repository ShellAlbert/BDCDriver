module uart_rx(clk,reset,serial_in,parallel_out,done,busy,err,negedge_rxd);
input clk;
input reset;
input serial_in;

output reg [7:0] parallel_out;
output reg done;
output reg busy;
output reg err;
output negedge_rxd;

//finite state machine.
parameter STATE_IDLE=2'b11;
parameter STATE_DATA_BITS=2'b10;
parameter STATE_STOP_BIT=2'b01;
reg [1:0] fsm/*synthesis preserve*/;

//shift register for input data.用于下降沿检测
//rx线默认为高电平，有起始位时，为低电平。
//previous_state=1 & current_state=1 结果为1，此时没有起始位。
//previous_state=1 & current_state=0 结果为0，此时就是下降沿。
reg [1:0] shift_serial_in;
wire negedge_rxd=shift_serial_in[1]&(~shift_serial_in[0])/*synthesis keep*/;

//temporary store input data.
reg [7:0] received_data;
//count clocks for 16x oversample.
reg [3:0] clock_count; //2^4=16.

//bit index.2^3=8bits.
reg [2:0] bitIndex;

always@(posedge clk or posedge reset)
begin
	if(reset) begin
				parallel_out<=8'd0;
				received_data<=8'd0;
				bitIndex<=3'd0;
				shift_serial_in<=2'd0;
				clock_count<=4'd0;
				done<=1'b0;
				busy<=1'b0;
				err<=1'b0;
				fsm<=STATE_IDLE;
	          end
	else begin
			//delay one clock cycle, used to check falling edge.
			shift_serial_in<={shift_serial_in[0],serial_in};
			case(fsm)
				STATE_IDLE: begin 
								done<=1'b0;  
								if(&clock_count) begin  //按位与,当所有位都为1时,说明计数达到16,进入下一状态.
													fsm<=STATE_DATA_BITS;

													clock_count<=4'd0;
													parallel_out<=8'd0;
													received_data<=8'd0;
													bitIndex<=3'd0;
													busy<=1'b1;
													err<=1'b0; 
								                 end
								//!(&shift_serial_in)按位与,所有位都为1时为False,有为0的情况为True，表示有下降沿了.
								//(|clock_count)按位或,当有为1的位时为True.
								//检测到下降沿，或者计数器开始计数了，但未达到16个。
								else if(negedge_rxd || clock_count!=4'd0) begin
																					if(&shift_serial_in) begin //shift_serial_in所有位都为1,没有下降沿.
																											err<=1'b1;
																											fsm<=STATE_IDLE;
																										  end
																					else
																						clock_count<=clock_count+1'b1;//有下降沿,计数器加1.
																		   end
							end
				STATE_DATA_BITS: begin 
									if(&clock_count) begin
														clock_count<=4'd0;
														received_data[bitIndex]<=shift_serial_in[0];
														if(&bitIndex) begin
																		bitIndex<=3'd0;
																		fsm<=STATE_STOP_BIT;
																	  end
														else	begin
																	bitIndex<=bitIndex+1'b1;
																end
														
									                 end
									else
										clock_count<=clock_count+1'b1;
								 end
				STATE_STOP_BIT: begin 
									if(&clock_count || (clock_count>4'h8 && !(|shift_serial_in))) begin
																									fsm<=STATE_IDLE;
																									done<=1'b1;
																									busy<=1'b0;
																									parallel_out<=received_data;
																								   end
									else begin
											clock_count<=clock_count+1'b1;
											if(!(|shift_serial_in)) begin
																		err<=1'b1;
																		fsm<=STATE_IDLE;
																	 end
										 end
								end
				default:  fsm<=STATE_IDLE;
			endcase
	     end
end
endmodule
